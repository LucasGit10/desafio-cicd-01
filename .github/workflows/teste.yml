name: Tests Executions
on:
    workflow_call:
jobs:
    unity-test:
        name: Unity Tests
        runs-on: ubuntu-latest
        steps:
            -   name: Get Project Code
                uses: actions/checkout@v4
            -   name: Dotnet Setup
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: "8.0.300"
            -   name: Unity Test Execution
                working-directory: ./src
                run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj
    integration-test:
        name: Integration Test
        runs-on: ubuntu-latest
        services:
            postgre:
                image: postgres:latest 
                ports:
                    -   5432:5432
                env:
                    POSTGRES_USER: review
                    POSTGRES_PASSWORD: postgrespwd
                    POSTGRES_DB: review-filmes
        steps:
            -   name: Get Project Code
                uses: actions/checkout@v4
            -   name: Dotnet Setup
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: "8.0.300"
            -   name: Integration Test Execution
                working-directory: ./src
                run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
                env:
                    ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=postgrespwd"
    # sonarqube:
    #     name: Scan with SonarQube
    #     runs-on: ubuntu-latest
    #     steps:
    #         -   name: Get Project Code
    #             uses: actions/checkout@v4
    #         -   name: JDK Setup
    #             uses: actions/setup-java@v4
    #             with:
    #                 distribution: adopt
    #                 java-version: '21'
    #         -   name: Dotnet Setup
    #             uses: actions/setup-dotnet@v4
    #             with:
    #                 dotnet-version: "8.0.300"
    #         -   name: SonarQube Scanner Install
    #             run: dotnet tool install --global dotnet-sonarscanner
    #         -   name: Build and Analisys
    #             working-directory: ./src
    #             run:
    #                 dotnet sonarscanner begin ${{ secrets.SONAR_HOST_URL }}
    #                 dotnet build src/Review-Filmes.sln
    #                 dotnet sonarscanner end ${{ secrets.SONAR_TOKEN }}
    #         -   name: Quality Gate Verification
    #             uses: sonarsources/sonarqube-quality-gate-action@master
    #              id: sonarqube-quality-gate-check
    #             env:
    #                 SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #                 SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #             with:
    #                 scanMetadataReportFile: ./src/sonarqube/out/.sonar/report-task.txt
    #            -   name: Show Quality Gate Status
    #                if: ${{ always() }}
    #                run: echo "The Quality Gate Status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status}}" 
    